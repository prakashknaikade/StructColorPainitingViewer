(function(){const l=document.createElement("link").relList;if(l&&l.supports&&l.supports("modulepreload"))return;for(const F of document.querySelectorAll('link[rel="modulepreload"]'))t(F);new MutationObserver(F=>{for(const V of F)if(V.type==="childList")for(const R of V.addedNodes)R.tagName==="LINK"&&R.rel==="modulepreload"&&t(R)}).observe(document,{childList:!0,subtree:!0});function U(F){const V={};return F.integrity&&(V.integrity=F.integrity),F.referrerPolicy&&(V.referrerPolicy=F.referrerPolicy),F.crossOrigin==="use-credentials"?V.credentials="include":F.crossOrigin==="anonymous"?V.credentials="omit":V.credentials="same-origin",V}function t(F){if(F.ep)return;F.ep=!0;const V=U(F);fetch(F.href,V)}})();class h{constructor(l=0,U=0,t=0){this.x=l,this.y=U,this.z=t}equals(l){return this.x===l.x&&this.y===l.y&&this.z===l.z}add(l){return typeof l=="number"?new h(this.x+l,this.y+l,this.z+l):new h(this.x+l.x,this.y+l.y,this.z+l.z)}subtract(l){return typeof l=="number"?new h(this.x-l,this.y-l,this.z-l):new h(this.x-l.x,this.y-l.y,this.z-l.z)}multiply(l){return typeof l=="number"?new h(this.x*l,this.y*l,this.z*l):new h(this.x*l.x,this.y*l.y,this.z*l.z)}lerp(l,U){return new h(this.x+(l.x-this.x)*U,this.y+(l.y-this.y)*U,this.z+(l.z-this.z)*U)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(l){return Math.sqrt((this.x-l.x)**2+(this.y-l.y)**2+(this.z-l.z)**2)}normalize(){const l=this.length();return new h(this.x/l,this.y/l,this.z/l)}flat(){return[this.x,this.y,this.z]}clone(){return new h(this.x,this.y,this.z)}}class Y{constructor(l=0,U=0,t=0,F=1){this.x=l,this.y=U,this.z=t,this.w=F}equals(l){return this.x===l.x&&this.y===l.y&&this.z===l.z&&this.w===l.w}normalize(){const l=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new Y(this.x/l,this.y/l,this.z/l,this.w/l)}multiply(l){const U=this.w,t=this.x,F=this.y,V=this.z,R=l.w,W=l.x,Q=l.y,Z=l.z;return new Y(U*W+t*R+F*Z-V*Q,U*Q-t*Z+F*R+V*W,U*Z+t*Q-F*W+V*R,U*R-t*W-F*Q-V*Z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new Y(this.x,this.y,this.z,this.w)}static FromEuler(l){const U=l.x/2,t=l.y/2,F=l.z/2,V=Math.cos(t),R=Math.sin(t),W=Math.cos(U),Q=Math.sin(U),Z=Math.cos(F),d=Math.sin(F);return new Y(V*Q*Z+R*W*d,R*W*Z-V*Q*d,V*W*d-R*Q*Z,V*W*Z+R*Q*d)}toEuler(){const l=2*(this.w*this.x+this.y*this.z),U=1-2*(this.x*this.x+this.y*this.y),t=Math.atan2(l,U);let F;const V=2*(this.w*this.y-this.z*this.x);F=Math.abs(V)>=1?Math.sign(V)*Math.PI/2:Math.asin(V);const R=2*(this.w*this.z+this.x*this.y),W=1-2*(this.y*this.y+this.z*this.z),Q=Math.atan2(R,W);return new h(t,F,Q)}static FromMatrix3(l){const U=l.buffer,t=U[0]+U[4]+U[8];let F,V,R,W;if(t>0){const Q=.5/Math.sqrt(t+1);W=.25/Q,F=(U[7]-U[5])*Q,V=(U[2]-U[6])*Q,R=(U[3]-U[1])*Q}else if(U[0]>U[4]&&U[0]>U[8]){const Q=2*Math.sqrt(1+U[0]-U[4]-U[8]);W=(U[7]-U[5])/Q,F=.25*Q,V=(U[1]+U[3])/Q,R=(U[2]+U[6])/Q}else if(U[4]>U[8]){const Q=2*Math.sqrt(1+U[4]-U[0]-U[8]);W=(U[2]-U[6])/Q,F=(U[1]+U[3])/Q,V=.25*Q,R=(U[5]+U[7])/Q}else{const Q=2*Math.sqrt(1+U[8]-U[0]-U[4]);W=(U[3]-U[1])/Q,F=(U[2]+U[6])/Q,V=(U[5]+U[7])/Q,R=.25*Q}return new Y(F,V,R,W)}}class QU{constructor(){const l=new Map;this.addEventListener=(U,t)=>{l.has(U)||l.set(U,new Set),l.get(U).add(t)},this.removeEventListener=(U,t)=>{l.has(U)&&l.get(U).delete(t)},this.hasEventListener=(U,t)=>!!l.has(U)&&l.get(U).has(t),this.dispatchEvent=U=>{if(l.has(U.type))for(const t of l.get(U.type))t(U)}}}class nU extends QU{constructor(){super(),this._position=new h,this._rotation=new Y,this._changeEvent={type:"change"}}get position(){return this._position}set position(l){this._position.equals(l)||(this._position=l,this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(l){this._rotation.equals(l)||(this._rotation=l,this.dispatchEvent(this._changeEvent))}}class G{constructor(l=1,U=0,t=0,F=0,V=1,R=0,W=0,Q=0,Z=1){this.buffer=[l,U,t,F,V,R,W,Q,Z]}equals(l){if(this.buffer.length!==l.buffer.length)return!1;if(this.buffer===l.buffer)return!0;for(let U=0;U<this.buffer.length;U++)if(this.buffer[U]!==l.buffer[U])return!1;return!0}multiply(l){const U=this.buffer,t=l.buffer;return new G(t[0]*U[0]+t[3]*U[1]+t[6]*U[2],t[1]*U[0]+t[4]*U[1]+t[7]*U[2],t[2]*U[0]+t[5]*U[1]+t[8]*U[2],t[0]*U[3]+t[3]*U[4]+t[6]*U[5],t[1]*U[3]+t[4]*U[4]+t[7]*U[5],t[2]*U[3]+t[5]*U[4]+t[8]*U[5],t[0]*U[6]+t[3]*U[7]+t[6]*U[8],t[1]*U[6]+t[4]*U[7]+t[7]*U[8],t[2]*U[6]+t[5]*U[7]+t[8]*U[8])}clone(){const l=this.buffer;return new G(l[0],l[1],l[2],l[3],l[4],l[5],l[6],l[7],l[8])}static Eye(l=1){return new G(l,0,0,0,l,0,0,0,l)}static Diagonal(l){return new G(l.x,0,0,0,l.y,0,0,0,l.z)}static RotationFromQuaternion(l){return new G(1-2*l.y*l.y-2*l.z*l.z,2*l.x*l.y-2*l.z*l.w,2*l.x*l.z+2*l.y*l.w,2*l.x*l.y+2*l.z*l.w,1-2*l.x*l.x-2*l.z*l.z,2*l.y*l.z-2*l.x*l.w,2*l.x*l.z-2*l.y*l.w,2*l.y*l.z+2*l.x*l.w,1-2*l.x*l.x-2*l.y*l.y)}static RotationFromEuler(l){const U=Math.cos(l.x),t=Math.sin(l.x),F=Math.cos(l.y),V=Math.sin(l.y),R=Math.cos(l.z),W=Math.sin(l.z);return new G(F*R+V*t*W,-F*W+V*t*R,V*U,U*W,U*R,-t,-V*R+F*t*W,V*W+F*t*R,F*U)}}class H{constructor(l=1,U=0,t=0,F=0,V=0,R=1,W=0,Q=0,Z=0,d=0,e=1,B=0,a=0,y=0,k=0,N=1){this.buffer=[l,U,t,F,V,R,W,Q,Z,d,e,B,a,y,k,N]}equals(l){if(this.buffer.length!==l.buffer.length)return!1;if(this.buffer===l.buffer)return!0;for(let U=0;U<this.buffer.length;U++)if(this.buffer[U]!==l.buffer[U])return!1;return!0}multiply(l){const U=this.buffer,t=l.buffer;return new H(t[0]*U[0]+t[1]*U[4]+t[2]*U[8]+t[3]*U[12],t[0]*U[1]+t[1]*U[5]+t[2]*U[9]+t[3]*U[13],t[0]*U[2]+t[1]*U[6]+t[2]*U[10]+t[3]*U[14],t[0]*U[3]+t[1]*U[7]+t[2]*U[11]+t[3]*U[15],t[4]*U[0]+t[5]*U[4]+t[6]*U[8]+t[7]*U[12],t[4]*U[1]+t[5]*U[5]+t[6]*U[9]+t[7]*U[13],t[4]*U[2]+t[5]*U[6]+t[6]*U[10]+t[7]*U[14],t[4]*U[3]+t[5]*U[7]+t[6]*U[11]+t[7]*U[15],t[8]*U[0]+t[9]*U[4]+t[10]*U[8]+t[11]*U[12],t[8]*U[1]+t[9]*U[5]+t[10]*U[9]+t[11]*U[13],t[8]*U[2]+t[9]*U[6]+t[10]*U[10]+t[11]*U[14],t[8]*U[3]+t[9]*U[7]+t[10]*U[11]+t[11]*U[15],t[12]*U[0]+t[13]*U[4]+t[14]*U[8]+t[15]*U[12],t[12]*U[1]+t[13]*U[5]+t[14]*U[9]+t[15]*U[13],t[12]*U[2]+t[13]*U[6]+t[14]*U[10]+t[15]*U[14],t[12]*U[3]+t[13]*U[7]+t[14]*U[11]+t[15]*U[15])}clone(){const l=this.buffer;return new H(l[0],l[1],l[2],l[3],l[4],l[5],l[6],l[7],l[8],l[9],l[10],l[11],l[12],l[13],l[14],l[15])}}class RU extends nU{constructor(l=new h(0,0,-5),U=new Y,t=1132,F=1132,V=.1,R=100){super();const W=()=>{const Q=G.RotationFromQuaternion(this.rotation).buffer,Z=this.position.flat(),d=[[Q[0],Q[1],Q[2],0],[Q[3],Q[4],Q[5],0],[Q[6],Q[7],Q[8],0],[-Z[0]*Q[0]-Z[1]*Q[3]-Z[2]*Q[6],-Z[0]*Q[1]-Z[1]*Q[4]-Z[2]*Q[7],-Z[0]*Q[2]-Z[1]*Q[5]-Z[2]*Q[8],1]].flat();return new H(...d)};this.position=l,this.rotation=U,this.fx=t,this.fy=F,this.near=V,this.far=R,this.projectionMatrix=new H,this.viewMatrix=new H,this.viewProj=new H,this.update=(Q,Z)=>{this.projectionMatrix=new H(2*this.fx/Q,0,0,0,0,-2*this.fy/Z,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this.viewMatrix=W(),this.viewProj=this.projectionMatrix.multiply(this.viewMatrix)}}}class D extends QU{constructor(){super();const l={type:"change"};this._vertexCount=0,this._positions=new Float32Array(0),this._rotations=new Float32Array(0),this._scales=new Float32Array(0),this._colors=new Uint8Array(0),this.setData=U=>{this._vertexCount=U.length/D.RowLength,this._positions=new Float32Array(3*this._vertexCount),this._rotations=new Float32Array(4*this._vertexCount),this._scales=new Float32Array(3*this._vertexCount),this._colors=new Uint8Array(4*this._vertexCount);const t=new Float32Array(U.buffer),F=new Uint8Array(U.buffer);for(let V=0;V<this._vertexCount;V++)this._positions[3*V+0]=t[8*V+0],this._positions[3*V+1]=t[8*V+1],this._positions[3*V+2]=t[8*V+2],this._rotations[4*V+0]=(F[32*V+28+0]-128)/128,this._rotations[4*V+1]=(F[32*V+28+1]-128)/128,this._rotations[4*V+2]=(F[32*V+28+2]-128)/128,this._rotations[4*V+3]=(F[32*V+28+3]-128)/128,this._scales[3*V+0]=t[8*V+3+0],this._scales[3*V+1]=t[8*V+3+1],this._scales[3*V+2]=t[8*V+3+2],this._colors[4*V+0]=F[32*V+24+0],this._colors[4*V+1]=F[32*V+24+1],this._colors[4*V+2]=F[32*V+24+2],this._colors[4*V+3]=F[32*V+24+3];this.dispatchEvent(l)},this.translate=U=>{for(let t=0;t<this._vertexCount;t++)this._positions[3*t+0]+=U.x,this._positions[3*t+1]+=U.y,this._positions[3*t+2]+=U.z;this.dispatchEvent(l)},this.rotate=U=>{const t=G.RotationFromQuaternion(U).buffer;for(let F=0;F<this._vertexCount;F++){const V=this._positions[3*F+0],R=this._positions[3*F+1],W=this._positions[3*F+2];this._positions[3*F+0]=t[0]*V+t[1]*R+t[2]*W,this._positions[3*F+1]=t[3]*V+t[4]*R+t[5]*W,this._positions[3*F+2]=t[6]*V+t[7]*R+t[8]*W;const Q=new Y(this._rotations[4*F+1],this._rotations[4*F+2],this._rotations[4*F+3],this._rotations[4*F+0]),Z=U.multiply(Q);this._rotations[4*F+1]=Z.x,this._rotations[4*F+2]=Z.y,this._rotations[4*F+3]=Z.z,this._rotations[4*F+0]=Z.w}this.dispatchEvent(l)},this.scale=U=>{for(let t=0;t<this.vertexCount;t++)this._positions[3*t+0]*=U.x,this._positions[3*t+1]*=U.y,this._positions[3*t+2]*=U.z,this._scales[3*t+0]*=U.x,this._scales[3*t+1]*=U.y,this._scales[3*t+2]*=U.z;this.dispatchEvent(l)},this.limitBox=(U,t,F,V,R,W)=>{if(U>=t)throw new Error(`xMin (${U}) must be smaller than xMax (${t})`);if(F>=V)throw new Error(`yMin (${F}) must be smaller than yMax (${V})`);if(R>=W)throw new Error(`zMin (${R}) must be smaller than zMax (${W})`);const Q=new Uint8Array(this._vertexCount);for(let d=0;d<this._vertexCount;d++){const e=this._positions[3*d+0],B=this._positions[3*d+1],a=this._positions[3*d+2];e>=U&&e<=t&&B>=F&&B<=V&&a>=R&&a<=W&&(Q[d]=1)}let Z=0;for(let d=0;d<this._vertexCount;d++)Q[d]!==0&&(this._positions[3*Z+0]=this._positions[3*d+0],this._positions[3*Z+1]=this._positions[3*d+1],this._positions[3*Z+2]=this._positions[3*d+2],this._rotations[4*Z+0]=this._rotations[4*d+0],this._rotations[4*Z+1]=this._rotations[4*d+1],this._rotations[4*Z+2]=this._rotations[4*d+2],this._rotations[4*Z+3]=this._rotations[4*d+3],this._scales[3*Z+0]=this._scales[3*d+0],this._scales[3*Z+1]=this._scales[3*d+1],this._scales[3*Z+2]=this._scales[3*d+2],this._colors[4*Z+0]=this._colors[4*d+0],this._colors[4*Z+1]=this._colors[4*d+1],this._colors[4*Z+2]=this._colors[4*d+2],this._colors[4*Z+3]=this._colors[4*d+3],Z+=1);this._vertexCount=Z,this._positions=new Float32Array(this._positions.buffer,0,3*Z),this._rotations=new Float32Array(this._rotations.buffer,0,4*Z),this._scales=new Float32Array(this._scales.buffer,0,3*Z),this._colors=new Uint8Array(this._colors.buffer,0,4*Z),this.dispatchEvent(l)},this.saveToFile=U=>{if(!document)return;const t=new Uint8Array(this._vertexCount*D.RowLength),F=new Float32Array(t.buffer),V=new Uint8Array(t.buffer);for(let Q=0;Q<this._vertexCount;Q++)F[8*Q+0]=this._positions[3*Q+0],F[8*Q+1]=this._positions[3*Q+1],F[8*Q+2]=this._positions[3*Q+2],V[32*Q+24+0]=this._colors[4*Q+0],V[32*Q+24+1]=this._colors[4*Q+1],V[32*Q+24+2]=this._colors[4*Q+2],V[32*Q+24+3]=this._colors[4*Q+3],F[8*Q+3+0]=this._scales[3*Q+0],F[8*Q+3+1]=this._scales[3*Q+1],F[8*Q+3+2]=this._scales[3*Q+2],V[32*Q+28+0]=128*this._rotations[4*Q+0]+128&255,V[32*Q+28+1]=128*this._rotations[4*Q+1]+128&255,V[32*Q+28+2]=128*this._rotations[4*Q+2]+128&255,V[32*Q+28+3]=128*this._rotations[4*Q+3]+128&255;const R=new Blob([t.buffer],{type:"application/octet-stream"}),W=document.createElement("a");W.download=U,W.href=URL.createObjectURL(R),W.click()}}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}}D.RowLength=32;class WU{static async LoadAsync(l,U,t){const F=await fetch(l,{mode:"cors",credentials:"omit"});if(F.status!=200)throw new Error(F.status+" Unable to load "+F.url);const V=F.body.getReader(),R=parseInt(F.headers.get("content-length")),W=new Uint8Array(R);let Q=0;for(;;){const{done:Z,value:d}=await V.read();if(Z)break;W.set(d,Q),Q+=d.length,t==null||t(Q/R)}U.setData(W)}static async LoadFromFileAsync(l,U,t){const F=new FileReader;F.onload=V=>{const R=new Uint8Array(V.target.result);U.setData(R)},F.onprogress=V=>{t==null||t(V.loaded/V.total)},F.readAsArrayBuffer(l),await new Promise(V=>{F.onloadend=()=>{V()}})}}function eU(b,l,U){var t=l===void 0?null:l,F=function(Q,Z){var d=atob(Q);if(Z){for(var e=new Uint8Array(d.length),B=0,a=d.length;B<a;++B)e[B]=d.charCodeAt(B);return String.fromCharCode.apply(null,new Uint16Array(e.buffer))}return d}(b,U!==void 0&&U),V=F.indexOf(`
`,10)+1,R=F.substring(V)+(t?"//# sourceMappingURL="+t:""),W=new Blob([R],{type:"application/javascript"});return URL.createObjectURL(W)}var $,UU,FU,P,BU=($="",UU=null,FU=!1,function(b){return P=P||eU($,UU,FU),new Worker(P,b)});class iU{constructor(l=1){let U,t,F,V=0,R=!1;this.init=(W,Q)=>{V=0,R=!0,U=W,t=W.gl.getUniformLocation(Q,"u_useDepthFade"),U.gl.uniform1i(t,1),F=W.gl.getUniformLocation(Q,"u_depthFade"),U.gl.uniform1f(F,V)},this.render=()=>{R&&(V=Math.min(V+.01*l,1),V>=1&&(R=!1,U.gl.uniform1i(t,0)),U.gl.uniform1f(F,V))}}}class cU{constructor(l){const U=new Float32Array(1),t=new Int32Array(U.buffer),F=Q=>{U[0]=Q;const Z=t[0],d=Z>>23&255;let e,B=8388607&Z;return d==0?e=0:d<113?(e=0,B|=8388608,B>>=113-d,16777216&B&&(e=1,B=0)):d<142?e=d-112:(e=31,B=0),(Z>>31&1)<<15|e<<10|B>>13},V=(Q,Z)=>(F(Q)|F(Z)<<16)>>>0;this._width=2048,this._height=Math.ceil(2*l.vertexCount/this._width),this._buffer=new Uint32Array(this._width*this._height*4);const R=new Float32Array(this._buffer.buffer),W=new Uint8Array(this._buffer.buffer);for(let Q=0;Q<l.vertexCount;Q++){R[8*Q+0]=l.positions[3*Q+0],R[8*Q+1]=l.positions[3*Q+1],R[8*Q+2]=l.positions[3*Q+2],W[4*(8*Q+7)+0]=l.colors[4*Q+0],W[4*(8*Q+7)+1]=l.colors[4*Q+1],W[4*(8*Q+7)+2]=l.colors[4*Q+2],W[4*(8*Q+7)+3]=l.colors[4*Q+3];const Z=G.RotationFromQuaternion(new Y(l.rotations[4*Q+1],l.rotations[4*Q+2],l.rotations[4*Q+3],-l.rotations[4*Q+0])),d=G.Diagonal(new h(l.scales[3*Q+0],l.scales[3*Q+1],l.scales[3*Q+2])).multiply(Z).buffer,e=[d[0]*d[0]+d[3]*d[3]+d[6]*d[6],d[0]*d[1]+d[3]*d[4]+d[6]*d[7],d[0]*d[2]+d[3]*d[5]+d[6]*d[8],d[1]*d[1]+d[4]*d[4]+d[7]*d[7],d[1]*d[2]+d[4]*d[5]+d[7]*d[8],d[2]*d[2]+d[5]*d[5]+d[8]*d[8]];this._buffer[8*Q+4]=V(4*e[0],4*e[1]),this._buffer[8*Q+5]=V(4*e[2],4*e[3]),this._buffer[8*Q+6]=V(4*e[4],4*e[5])}}get buffer(){return this._buffer}get width(){return this._width}get height(){return this._height}}class hU{constructor(l=null,U=null){const t=l||document.createElement("canvas");l||(t.style.display="block",t.style.boxSizing="border-box",t.style.width="100%",t.style.height="100%",t.style.margin="0",t.style.padding="0",document.body.appendChild(t)),t.style.background="#000",this.domElement=t;const F=t.getContext("webgl2",{antialias:!1});this.gl=F;const V=U||[];let R,W,Q,Z,d,e,B,a,y,k,N,p,J,i;U||V.push(new iU);let T=!1;this.resize=()=>{const r=t.clientWidth,S=t.clientHeight;t.width===r&&t.height===S||this.setSize(r,S)},this.setSize=(r,S)=>{t.width=r,t.height=S,W&&(F.viewport(0,0,t.width,t.height),W.update(t.width,t.height),B=F.getUniformLocation(e,"projection"),F.uniformMatrix4fv(B,!1,W.projectionMatrix.buffer),a=F.getUniformLocation(e,"viewport"),F.uniform2fv(a,new Float32Array([t.width,t.height])))};const w=()=>{Q=new BU;const r={positions:R.positions,vertexCount:R.vertexCount};Q.postMessage({sortData:r}),F.viewport(0,0,t.width,t.height),Z=F.createShader(F.VERTEX_SHADER),F.shaderSource(Z,`#version 300 es
precision highp float;
precision highp int;

uniform highp usampler2D u_texture;
uniform mat4 projection, view;
uniform vec2 focal;
uniform vec2 viewport;

uniform bool u_useDepthFade;
uniform float u_depthFade;

in vec2 position;
in int index;

out vec4 vColor;
out vec2 vPosition;

void main () {
    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);
    vec4 cam = view * vec4(uintBitsToFloat(cen.xyz), 1);
    vec4 pos2d = projection * cam;

    float clip = 1.2 * pos2d.w;
    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {
        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
        return;
    }


    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);
    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);
    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);

    mat3 J = mat3(
        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), 
        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), 
        0., 0., 0.
    );

    mat3 T = transpose(mat3(view)) * J;
    mat3 cov2d = transpose(T) * Vrk * T;

    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;
    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));
    float lambda1 = mid + radius, lambda2 = mid - radius;

    if(lambda2 < 0.0) return;
    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));
    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;
    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);

    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;
    vPosition = position;

    float scalingFactor = 1.0;

    if(u_useDepthFade) {
        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;
        float near = 0.1; float far = 100.0;
        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));
        float start = max(normalizedDepth - 0.1, 0.0);
        float end = min(normalizedDepth + 0.1, 1.0);
        scalingFactor = clamp((u_depthFade - start) / (end - start), 0.0, 1.0);
    }

    vec2 vCenter = vec2(pos2d) / pos2d.w;
    gl_Position = vec4(
        vCenter 
        + position.x * majorAxis * scalingFactor / viewport 
        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);

}
`),F.compileShader(Z),F.getShaderParameter(Z,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(Z)),d=F.createShader(F.FRAGMENT_SHADER),F.shaderSource(d,`#version 300 es
precision highp float;

in vec4 vColor;
in vec2 vPosition;

out vec4 fragColor;

void main () {
    float A = -dot(vPosition, vPosition);
    if (A < -4.0) discard;
    float B = exp(A) * vColor.a;
    fragColor = vec4(B * vColor.rgb, B);
}
`),F.compileShader(d),F.getShaderParameter(d,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(d)),e=F.createProgram(),F.attachShader(e,Z),F.attachShader(e,d),F.linkProgram(e),F.useProgram(e),F.getProgramParameter(e,F.LINK_STATUS)||console.error(F.getProgramInfoLog(e)),F.disable(F.DEPTH_TEST),F.enable(F.BLEND),F.blendFuncSeparate(F.ONE_MINUS_DST_ALPHA,F.ONE,F.ONE_MINUS_DST_ALPHA,F.ONE),F.blendEquationSeparate(F.FUNC_ADD,F.FUNC_ADD),W.update(t.width,t.height),B=F.getUniformLocation(e,"projection"),F.uniformMatrix4fv(B,!1,W.projectionMatrix.buffer),a=F.getUniformLocation(e,"viewport"),F.uniform2fv(a,new Float32Array([t.width,t.height])),y=F.getUniformLocation(e,"focal"),F.uniform2fv(y,new Float32Array([W.fx,W.fy])),k=F.getUniformLocation(e,"view"),F.uniformMatrix4fv(k,!1,W.viewMatrix.buffer);const S=new Float32Array([-2,-2,2,-2,2,2,-2,2]);i=F.createBuffer(),F.bindBuffer(F.ARRAY_BUFFER,i),F.bufferData(F.ARRAY_BUFFER,S,F.STATIC_DRAW),p=F.getAttribLocation(e,"position"),F.enableVertexAttribArray(p),F.vertexAttribPointer(p,2,F.FLOAT,!1,0,0);const C=F.createTexture();F.bindTexture(F.TEXTURE_2D,C),N=F.getUniformLocation(e,"u_texture"),F.uniform1i(N,0);const K=F.createBuffer();J=F.getAttribLocation(e,"index"),F.enableVertexAttribArray(J),F.bindBuffer(F.ARRAY_BUFFER,K),F.vertexAttribIPointer(J,1,F.INT,0,0),F.vertexAttribDivisor(J,1);const v=new cU(R);F.bindTexture(F.TEXTURE_2D,C),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,F.NEAREST),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,F.NEAREST),F.texImage2D(F.TEXTURE_2D,0,F.RGBA32UI,v.width,v.height,0,F.RGBA_INTEGER,F.UNSIGNED_INT,v.buffer),F.activeTexture(F.TEXTURE0),F.bindTexture(F.TEXTURE_2D,C);for(const g of V)g.init(this,e);Q.onmessage=g=>{if(g.data.depthIndex){const{depthIndex:f}=g.data;F.bindBuffer(F.ARRAY_BUFFER,K),F.bufferData(F.ARRAY_BUFFER,f,F.STATIC_DRAW)}},T=!0},x=()=>{T&&this.dispose(),w()};this.render=(r,S)=>{if(r===R&&S===W||(T&&this.dispose(),W=S,r!==R&&(R&&R.removeEventListener("change",x),R=r,R.addEventListener("change",x)),w()),W.update(t.width,t.height),Q.postMessage({viewProj:W.viewProj}),R.vertexCount>0){for(const C of V)C.render();F.uniformMatrix4fv(k,!1,W.viewMatrix.buffer),F.clear(F.COLOR_BUFFER_BIT),F.drawArraysInstanced(F.TRIANGLE_FAN,0,4,R.vertexCount)}else F.clear(F.COLOR_BUFFER_BIT)},this.dispose=()=>{T&&(Q.terminate(),F.deleteShader(Z),F.deleteShader(d),F.deleteProgram(e),F.deleteBuffer(i),F.deleteBuffer(void 0),F.deleteBuffer(void 0),F.deleteBuffer(void 0),F.deleteBuffer(void 0),T=!1)},this.resize()}}class JU{constructor(l,U,t=.5,F=.5,V=5,R=!0,W=new h){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{},this.attach=()=>{},this.detach=()=>{};let Q=W.clone(),Z=Q.clone(),d=t,e=F,B=V,a=!1,y=!1,k=0,N=0,p=0;const J={};let i=null,T=!1;const w=()=>{if(!i||T)return;const n=i.rotation.toEuler();d=-n.y,e=-n.x;const c=i.position.x-B*Math.sin(d)*Math.cos(e),s=i.position.y+B*Math.sin(e),m=i.position.z+B*Math.cos(d)*Math.cos(e);Z=new h(c,s,m)};this.attach=n=>{i&&this.detach(),i=n,i.addEventListener("change",w)},this.detach=()=>{i&&(i.removeEventListener("change",w),i=null)},this.attach(l),this.setCameraTarget=n=>{if(!i)return;const c=n.x-i.position.x,s=n.y-i.position.y,m=n.z-i.position.z;B=Math.sqrt(c*c+s*s+m*m),e=Math.atan2(s,Math.sqrt(c*c+m*m)),d=-Math.atan2(c,m),Z=new h(n.x,n.y,n.z)};const x=()=>.1+.9*(B-this.minZoom)/(this.maxZoom-this.minZoom),r=n=>{J[n.code]=!0,n.code==="ArrowUp"&&(J.KeyW=!0),n.code==="ArrowDown"&&(J.KeyS=!0),n.code==="ArrowLeft"&&(J.KeyA=!0),n.code==="ArrowRight"&&(J.KeyD=!0)},S=n=>{J[n.code]=!1,n.code==="ArrowUp"&&(J.KeyW=!1),n.code==="ArrowDown"&&(J.KeyS=!1),n.code==="ArrowLeft"&&(J.KeyA=!1),n.code==="ArrowRight"&&(J.KeyD=!1)},C=n=>{o(n),a=!0,y=n.button===2,N=n.clientX,p=n.clientY,window.addEventListener("mouseup",K)},K=n=>{o(n),a=!1,y=!1,window.removeEventListener("mouseup",K)},v=n=>{if(o(n),!a||!i)return;const c=n.clientX-N,s=n.clientY-p;if(y){const m=x(),M=-c*this.panSpeed*.01*m,z=-s*this.panSpeed*.01*m,X=G.RotationFromQuaternion(i.rotation).buffer,E=new h(X[0],X[3],X[6]),u=new h(X[1],X[4],X[7]);Z=Z.add(E.multiply(M)),Z=Z.add(u.multiply(z))}else d-=c*this.orbitSpeed*.003,e+=s*this.orbitSpeed*.003,e=Math.min(Math.max(e,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);N=n.clientX,p=n.clientY},g=n=>{o(n);const c=x();B+=n.deltaY*this.zoomSpeed*.025*c,B=Math.min(Math.max(B,this.minZoom),this.maxZoom)},f=n=>{if(o(n),n.touches.length===1)a=!0,y=!1,N=n.touches[0].clientX,p=n.touches[0].clientY,k=0;else if(n.touches.length===2){a=!0,y=!0,N=(n.touches[0].clientX+n.touches[1].clientX)/2,p=(n.touches[0].clientY+n.touches[1].clientY)/2;const c=n.touches[0].clientX-n.touches[1].clientX,s=n.touches[0].clientY-n.touches[1].clientY;k=Math.sqrt(c*c+s*s)}},_=n=>{o(n),a=!1,y=!1},q=n=>{if(o(n),a&&i)if(y){const c=x(),s=n.touches[0].clientX-n.touches[1].clientX,m=n.touches[0].clientY-n.touches[1].clientY,M=Math.sqrt(s*s+m*m);B+=(k-M)*this.zoomSpeed*.1*c,B=Math.min(Math.max(B,this.minZoom),this.maxZoom),k=M;const z=(n.touches[0].clientX+n.touches[1].clientX)/2,X=(n.touches[0].clientY+n.touches[1].clientY)/2,E=z-N,u=X-p,I=G.RotationFromQuaternion(i.rotation).buffer,j=new h(I[0],I[3],I[6]),ZU=new h(I[1],I[4],I[7]);Z=Z.add(j.multiply(-E*this.panSpeed*.025*c)),Z=Z.add(ZU.multiply(-u*this.panSpeed*.025*c)),N=z,p=X}else{const c=n.touches[0].clientX-N,s=n.touches[0].clientY-p;d-=c*this.orbitSpeed*.003,e+=s*this.orbitSpeed*.003,e=Math.min(Math.max(e,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),N=n.touches[0].clientX,p=n.touches[0].clientY}},O=(n,c,s)=>(1-s)*n+s*c;this.update=()=>{if(!i)return;T=!0,t=O(t,d,this.dampening),F=O(F,e,this.dampening),V=O(V,B,this.dampening),Q=Q.lerp(Z,this.dampening);const n=Q.x+V*Math.sin(t)*Math.cos(F),c=Q.y-V*Math.sin(F),s=Q.z-V*Math.cos(t)*Math.cos(F);i.position=new h(n,c,s);const m=Q.subtract(i.position).normalize(),M=Math.asin(-m.y),z=Math.atan2(m.x,m.z);i.rotation=Y.FromEuler(new h(M,z,0));const X=.025,E=.01,u=G.RotationFromQuaternion(i.rotation).buffer,I=new h(-u[2],-u[5],-u[8]),j=new h(u[0],u[3],u[6]);J.KeyS&&(Z=Z.add(I.multiply(X))),J.KeyW&&(Z=Z.subtract(I.multiply(X))),J.KeyA&&(Z=Z.subtract(j.multiply(X))),J.KeyD&&(Z=Z.add(j.multiply(X))),J.KeyE&&(d+=E),J.KeyQ&&(d-=E),J.KeyR&&(e+=E),J.KeyF&&(e-=E),T=!1};const o=n=>{n.preventDefault(),n.stopPropagation()};this.dispose=()=>{U.removeEventListener("dragenter",o),U.removeEventListener("dragover",o),U.removeEventListener("dragleave",o),U.removeEventListener("contextmenu",o),U.removeEventListener("mousedown",C),U.removeEventListener("mousemove",v),U.removeEventListener("wheel",g),U.removeEventListener("touchstart",f),U.removeEventListener("touchend",_),U.removeEventListener("touchmove",q),R&&(window.removeEventListener("keydown",r),window.removeEventListener("keyup",S))},R&&(window.addEventListener("keydown",r),window.addEventListener("keyup",S)),U.addEventListener("dragenter",o),U.addEventListener("dragover",o),U.addEventListener("dragleave",o),U.addEventListener("contextmenu",o),U.addEventListener("mousedown",C),U.addEventListener("mousemove",v),U.addEventListener("wheel",g),U.addEventListener("touchstart",f),U.addEventListener("touchend",_),U.addEventListener("touchmove",q),this.update()}}let L=new D;const VU=new RU,A=new hU,sU=new JU(VU,A.domElement);var lU;(lU=document.getElementById("viewer"))==null||lU.appendChild(A.domElement);async function dU(b){L=new D,await WU.LoadAsync(b,L,()=>{});const l=()=>{sU.update(),A.render(L,VU),requestAnimationFrame(l)};requestAnimationFrame(l)}var tU;(tU=document.getElementById("fileSelector"))==null||tU.addEventListener("change",b=>{const l=b.target.value;dU(l)});dU("https://huggingface.co/datasets/prakashknaikade/3DGS_Results/resolve/main/taylor_swift_gsplat_extended_sh_0_cropped.splat?download=true");
